%option noyywrap
%option yylineno

%{ 
#include <stdlib.h>
#include <stdio.h>

// Forward declarations for functions that will be generated by flex
extern int yylex();
extern char* yytext;
extern FILE* yyin;

// Function to print token information (for debugging)
void print_token(const char* token_name, const char* value) {
    printf("%s: %s\n", token_name, value);
}
%}

%% 

[0-9]+       { print_token("INTEGER", yytext); }
"+"          { print_token("PLUS", yytext); }
"-"          { print_token("MINUS", yytext); }
"*"          { print_token("MULTIPLY", yytext); }
"/"          { print_token("DIVIDE", yytext); }
"="          { print_token("ASSIGN", yytext); }
"=="         { print_token("EQUAL", yytext); }
"!="         { print_token("NOT_EQUAL", yytext); }
"<"          { print_token("LESS_THAN", yytext); }
">"          { print_token("GREATER_THAN", yytext); }
"<="         { print_token("LESS_EQUAL", yytext); }
">="         { print_token("GREATER_EQUAL", yytext); }
"&&"         { print_token("LOGICAL_AND", yytext); }
"||"         { print_token("LOGICAL_OR", yytext); }
"++"         { print_token("INCREMENT", yytext); }
"--"         { print_token("DECREMENT", yytext); }
"("          { print_token("LPAREN", yytext); }
")"          { print_token("RPAREN", yytext); }
"{{"         { print_token("LBRACE", yytext); }
"}}"         { print_token("RBRACE", yytext); }
";"          { print_token("SEMICOLON", yytext); }
","          { print_token("COMMA", yytext); }
[ \t]+       { /* Ignore whitespace */ }
\n          { /* Ignore newlines */ }
.            { print_token("UNKNOWN", yytext); }

%% 

int main(int argc, char **argv) {
    if (argc > 1) {
        FILE *file = fopen(argv[1], "r");
        if (!file) {
            perror("Error opening file");
            return 1;
        }
        yyin = file;
    }

    int token;
    while ((token = yylex())) {
        // yylex() already prints the token information
    }

    if (yyin != stdin) {
        fclose(yyin);
    }

    return 0;
}
